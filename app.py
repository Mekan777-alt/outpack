import logging
from config import dp, db, loop
import hendlers
from aiogram import executor
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup
import filters
from filters import IsUser, IsAdmin
from aiogram.dispatcher import FSMContext

filters.setup(dp)

cart = 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –ö–æ—Ä–∑–∏–Ω—É'
balance = 'üí∞ –ë–∞–ª–∞–Ω—Å'
settings = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞'
questions = '‚ùì –í–æ–ø—Ä–æ—Å—ã'
add_product = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
delete_product = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'
btnMenu = "üìñ –ú–ï–ù–Æ"
btnBrn = "üìû –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨"
btnTime = "üïó –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´"
btnbar = "üçæ –ë–ê–†"
btndlv = "üéí –î–û–°–¢–ê–í–ö–ê"
orders = 'üöö –ó–∞–∫–∞–∑—ã'
sos = "? –ü–û–ú–û–©–¨"


@dp.message_handler(IsUser(), commands="start", state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(btnMenu, btnbar, btnTime).add(btnBrn, btndlv, sos)
    await message.answer('–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, {0.first_name}\n'
                         '–Ø –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫.\n'
                         '–Ø –ø–æ–º–æ–≥—É –í–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é, —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ '
                         '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª.'.format(
        message.from_user), reply_markup=markup)


@dp.message_handler(IsAdmin(), commands="start")
async def cmd_start(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(settings)
    await message.answer('''–í–ö–õ–Æ–ß–ï–ù –†–ï–ñ–ò–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê''', reply_markup=markup)


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup, loop=loop)
